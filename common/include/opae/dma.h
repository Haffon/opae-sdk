// Copyright(c) 2017, Intel Corporation
//
// Redistribution  and  use  in source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of  source code  must retain the  above copyright notice,
//   this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// * Neither the name  of Intel Corporation  nor the names of its contributors
//   may be used to  endorse or promote  products derived  from this  software
//   without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
// IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT OWNER  OR CONTRIBUTORS BE
// LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
// CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED  TO,  PROCUREMENT  OF
// SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA, OR PROFITS;  OR BUSINESS
// INTERRUPTION)  HOWEVER CAUSED  AND ON ANY THEORY  OF LIABILITY,  WHETHER IN
// CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

/**
 * @file enum.h
 * @brief APIs for resource enumeration and managing tokens
 *
 * These APIs are the first step for any application using OPAE to discover
 * resources that are present on the system. They allow selective enumeration
 * (i.e. getting a list of resources that match a given list of criteria) and
 * methods to manage the lifecycle of tokens generated by fpgaEnumerate().
 */

#ifndef __FPGA_DMA_H__
#define __FPGA_DMA_H__

#include <opae/types.h>

#ifdef __cplusplus
extern "C" {
#endif

fpga_result fpgaDMAOpen(fpga_dma_handle *dma_handle,
			fpga_feature_token feature_token,
			int flags,
			void *dma_priv_config,
			int *fd);

fpga_result fpgaDmaClose(fpga_dma_handle dma_handle);

fpga_result fpgaDMATransferSync(fpga_dma_handle dma_handle, fpga_dma_transfer dma_xfer);

fpga_result fpgaDMATransferPoll(fpga_dma_handle dma_handle, fpga_dma_transfer dma_xfer);

fpga_result fpgaDMATransferCB(fpga_dma_handle dma,
                        fpga_dma_transfer dma_xfer,
                        fpga_dma_transfer_cb cb,
                        void *context);

fpga_result fpgaDMAPostBuffer(fpga_dma_handle dma,
			      fpga_dma_transfer *rx_stream_info);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif // __FPGA_DMA_H__
